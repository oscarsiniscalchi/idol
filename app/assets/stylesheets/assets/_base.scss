// --------------------------------------------------------
// VARIABLES
// --------------------------------------------------------

// Breakpoints (change as needed)
/* Available Variables */
$handheld-min: 0px;
$handheld-max: 479px;
$handheld-landscape-min: 480px;
$handheld-landscape-max: 767px;
$small-screen: 768px;
$default-screen: 980px;
$medium-screen: 1280px;
$large-screen-min: 1250px;
$large-screen-max: 1800px;
$high-ress-min: 1801px;
$high-ress-max: 6000px;

$high_ress: "only screen and (min-width:"#{$high-ress-min}") and (max-width: "#{$high-ress-max}")";
$large: "only screen and (min-width:"#{$large-screen-min}") and (max-width: "#{$large-screen-max}")";
$default: "only screen and (min-width:"#{$default-screen}")";
$tablet_portrait: "only screen and (min-width:"#{$small-screen}") and (max-width: "#{$default-screen}")";
$handheld_landscape: "only screen and (min-width:"#{$handheld-landscape-min}") and (max-width: "#{$handheld-landscape-max}")";
$handheld: "only screen and (min-width:"#{$handheld-min}") and (max-width: "#{$handheld-max}")";

$screen: "only screen";
$landscape: "only screen and (orientation: landscape)";
$portrait: "only screen and (orientation: portrait)";

@mixin respond-to($media) {
  @if $media == handheld {
    @media #{$handheld} { @content; }
  }
  @else if $media == handheld-landscape {
    @media #{$handheld_landscape} { @content; }
  }
  @else if $media == tablet-portrait {
    @media #{$tablet_portrait} { @content; }
  }
  @else if $media == default {
    @media #{$default} { @content; }
  }
  @else if $media == large {
    @media #{$large} { @content; }
  }
  @else if $media == high-ress {
    @media #{$high_ress} { @content; }
  }
}

//ASSETS PATH
$assetPath : "fonts/layout";

//-----------------------------------
// VARIABLES
//-----------------------------------

// Grayscale
$black-10:  darken(#fff, 10%) !default;
$black-20:  darken(#fff, 20%) !default;
$black-30:  darken(#fff, 30%) !default;
$black-40:  darken(#fff, 40%) !default;
$black-50:  darken(#fff, 50%) !default;
$black-60:  darken(#fff, 60%) !default;
$black-70:  darken(#fff, 70%) !default;
$black-80:  darken(#fff, 80%) !default;
$black-90:  darken(#fff, 90%) !default;
$white: #fff;
// Default Colors
$primary-color: #2ba6cb !default;
$secondary-color: #e9e9e9 !default;
$alert-color: #c60f13 !default;
$success-color: #5da423 !default;
// Action Colors
$action-primary:#428bca !default;
$action-success:#5cb85c !default;
$action-warning:#f0ad4e !default;
$action-danger: #d9534f !default;
$action-info:   #5bc0de !default;
            
// Brand Colors
$brand-primary:#7A4D96 !default;
$brand-2:#82477B !default;
$brand-3:#E34575 !default;
$brand-success:#57F99C !default;
$brand-warning:#E9C736 !default;
$brand-danger: #E32225 !default;
$brand-info:   #42C5F3 !default;
//box
$box-color: #FF5247;
$box-bg: $black-70;
//Radius
$global-radius: 3px;

//Fonts Vars
$font-family-sans-serif: "Helvetica Neue", Helvetica, Arial, sans-serif;
$font-family-serif: Georgia, "Times New Roman", Times, serif;
$font-family-monospace: Monaco, Menlo, Consolas, "Courier New", monospace;
$font-base: $font-family-sans-serif !default;

/* #Scaffolding
================================================== */
$text-color:$black-70 !default;
$body-bg: #fff !default;
$body-font-color: #222 !default;
$body-font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif !default;
$body-font-weight: normal !default;
$body-font-style: normal !default;
// Text direction settings
$text-direction: ltr !default; // Controls default global text direction, 'rtl' or 'ltr'
$default-float: left !default;
$default-opposite: right !default;
// No need to change this conditional statement, $text-direction variable controls it all.
@if $text-direction == ltr {
  $default-float: left;
  $default-opposite: right;
} @else {
  $default-float: right;
  $default-opposite: left;
}

/* #Typography
================================================== */

// Text sizing and baseline
$bl: 28px !default;
$font-size: 14 !default;
$em-base: 14px !default;
$fs: $font-size +px;
$lh-base:1.5;

@function emCalc($pxWidth) {
  @return $pxWidth / $em-base * 1em;
}

@mixin f-size($sizeValue){
  font-size: ($sizeValue) + px;
  font-size: $sizeValue / $font-size * 1rem;
}

@mixin l-height($sizeValue) {
  line-height: ($sizeValue) + px;
  line-height:$sizeValue / $font-size * 1rem;
}

/* Lists */
ul {
  ul, ol {
    padding-left:emCalc(15px);
  }
}

pre {
  margin:0;
  &.secondary {
    code {
      font-family:$font-family-monospace;
      background-color:darken($secondary-color, 40%);
    }//code
  }//secondary pre label
}

/* #Blocks Classes and helpers
================================================== */

.content-block {
  padding:0 0 emCalc(30px) 0;
  margin-bottom:emCalc(30px);
  border-bottom:1px solid $black-10;
  @include clearfix();
}

.box {
    display: block;
    background: $box-color;
    color: $box-bg;
    padding: 0em 1.5em;
    margin-bottom: 1.5em;
    @include border-radius(4px);
    @include clearfix();
}//box

.fixed {
  position:fixed;
  width: inherit;
  z-index: 99;
}//fixed class

//==================================================


/// --------------------------------------------------------
// MIXINS, FUNCTIONS, AND A LITTLE RESET
// --------------------------------------------------------

// Inset shadow shiny edges and depressions.
$shiny-edge-size: 0 1px 0 !default;
$shiny-edge-color: rgba(#fff, .5) !default;
$shiny-edge-active-color: rgba(#000, .2) !default;


@function black($opacity) {
  @return rgba(0,0,0,$opacity)
}

@function white($opacity) {
  @return rgba(255,255,255,$opacity)
}

@function greyscale($amount, $opacity:1) {
  @return rgba($amount,$amount,$amount,$opacity)
}

// Border Radius
@mixin radius($radius:$global-radius) {
  @if $radius {
    border-radius: $radius;
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;
  }
}

// Equal side border radius on elements.
@mixin side-radius($side, $radius) {
  @include radius(0);
  @if $side == left {
    -moz-border-radius-bottomleft: $radius;
    -moz-border-radius-topleft: $radius;
    -webkit-border-bottom-left-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
  }
  @else if $side == right {
    -moz-border-radius-topright: $radius;
    -moz-border-radius-bottomright: $radius;
    -webkit-border-top-right-radius: $radius;
    -webkit-border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  }
  @else if $side == top {
    -moz-border-radius-topright: $radius;
    -moz-border-radius-topleft: $radius;
    -webkit-border-top-right-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
  }
  @else if $side == bottom {
    -moz-border-radius-bottomright: $radius;
    -moz-border-radius-bottomleft: $radius;
    -webkit-border-bottom-right-radius: $radius;
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

// Box Shadow
@mixin box-shadow( $horiz : .5em , $vert : .5em , $blur : 0px , $spread : 0px , $color : #000000 ){
  box-shadow: $horiz $vert $blur $spread $color;
}

// Transitions
@mixin transition($property: all, $duration: 0.2s, $timing: linear) {
	-webkit-transition: #{$property} $duration $timing;
	-moz-transition: #{$property} $duration $timing;
	-ie-transition: #{$property} $duration $timing;
	-o-transition: #{$property} $duration $timing;
	transition: $property $duration $timing;
}

// Equalateral triangles
@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  content: "";
  display: block;
  width: 0;
  height: 0;
  border: solid $triangle-size;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
  }
}

// We use this to do clear floats
@mixin clearfix() {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}
.clearfix {
  @include clearfix();
}